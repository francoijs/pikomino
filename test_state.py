from unittest import TestCase
from state import State


class TestState(TestCase):
    
    def test_find_candidates(self):
        data = [
            # choose and roll again
            ( ([0,0,0,0,0,0], [0,8,0,0,0,0], 21) , [1] ),
            ( ([0,0,0,0,0,0], [1,3,1,1,1,1], 21) , [0,1,2,3,4,5] ),
            ( ([2,0,0,0,0,2], [0,4,0,0,0,0], 25) , [1] ),
            ( ([1,0,1,0,1,0], [1,1,1,0,1,1], 21) , [1,5] ),
            # miss because of score
            ( ([1,1,1,1,1,1], [0,0,0,1,0,1], 21) , [] ),
            ( ([1,0,1,0,1,0], [1,0,3,0,1,0], 21) , [] ),
            ( ([2,4,0,0,0,2], [0,0,0,0,0,0], 25) , [] ),
            # miss because of pikos
            ( ([0,0,1,0,1,4], [0,0,1,0,1,0], 21) , [] ),
            ( ([0,0,3,0,1,4], [0,0,0,0,0,0], 21) , [] ),
            # choose and stop
            ( ([0,0,0,0,0,0], [8,0,0,0,0,0], 21) , [0,6] ),
            ( ([2,0,0,0,0,2], [0,1,1,1,1,0], 21) , [1,2,3,4,7,8,9,10] ),
            # steal opponent
            ( ([2,0,0,0,0,2], [0,1,1,1,1,0], 25) , [1,2,3,4,7] ),
            ( ([2,0,0,0,0,2], [0,1,1,1,1,0], 24) , [1,2,3,4,7,10] ),
            # non reg
            ( ([0, 0, 1, 0, 2, 1], [0, 0, 1, 2, 1, 0], 21),  [3] )
        ]
        for d in data:
            dices = d[0][0]
            roll  = d[0][1]
            small = d[0][2]
            cands = d[1]
            self.assertEqual(State(roll=roll, dices=dices, stash=[small], opponent=[21])
                             .find_candidates(), cands)

    def test_transition(self):
        data = [
            #  input state                                  , action
            #  output state
            # choose and roll again
            ( ([21,22,23],[],[],[0,0,0,0,0,0],[0,8,0,0,0,0]), 1,
              ([21,22,23],[],[],[0,8,0,0,0,0]) ),
            ( ([21,22,23],[],[],[0,0,0,0,0,0],[1,3,1,1,1,1]), 5,
              ([21,22,23],[],[],[0,0,0,0,0,1]) ),
            ( ([21,22,23],[],[],[2,0,0,0,0,2],[0,4,0,0,0,0]), 1,
              ([21,22,23],[],[],[2,4,0,0,0,2]) ),
            # miss because of score
            ( ([21,22,25],[],[24],[1,1,1,1,1,1],[0,0,0,1,0,1]), -1,
              ([21,22,24],[],[]  ,[0,0,0,0,0,0]) ),
            # miss because of pikos
            ( ([21,22,25],[],[24],[0,0,1,0,1,4], [0,0,1,0,1,0]), -1,
              ([21,22,24],[],[]  ,[0,0,0,0,0,0]) ),
            # choose and stop
            ( ([21,22,25],[],[24]   ,[0,0,0,0,0,0], [8,0,0,0,0,0]), 6,
              ([21,22]   ,[],[24,25],[0,0,0,0,0,0]) ),
            ( ([21,22,25],[],[24]   ,[2,0,0,0,0,2], [0,1,1,1,1,0]), 7,
              ([22,25]   ,[],[24,21],[0,0,0,0,0,0]) ),
            # steal opponent
            ( ([22,25]   ,[21],[24]   ,[2,0,0,0,0,2], [0,1,1,1,1,0]), 7,
              ([22,25]   ,[]  ,[24,21],[0,0,0,0,0,0]) ),
            ( ([22,25]   ,[23],[24]   ,[2,0,0,0,0,2], [0,1,1,1,1,0]), 9,
              ([22,25]   ,[]  ,[24,23],[0,0,0,0,0,0]) ),
            # nonreg
            ( ([35, 36], [], [], [0, 1, 0, 1, 2, 2], [0, 2, 0, 0, 0, 0]), -1,
              ([35]    , [], [], [0, 0, 0, 0, 0, 0]) )
        ]
        for d in data:
            inp = d[0]
            action = d[1]
            out = d[2]
            state = State(*inp)
            self.assertEqual(state.transition(action), State(*out))


    def test_inputs(self):
        data = [
            #  input state                                     , action
            #  output state                                    , reward
            # choose and roll again
            ( ([21,22,23],[],[],[0,0,0,0,0,0],[0,8,0,0,0,0]),
              (1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
               0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
               1,0,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0,1,
               1,0,0,0,0,0,0,0,0,
               1,0,0,0,0,0,0,0,0,
               1,0,0,0,0,0,0,0,0,
               1,0,0,0,0,0,0,0,0,
               1,0,0,0,0,0,0,0,0,
               1,0,0,0,0,0,0,0,0,
               1,0,0,0,0,0,0,0,0,
               0,1,0,0,0,0,0,0,0,
               0,0,1,0,0,0,0,0,0,
               0,0,0,1,0,0,0,0,0,
               0,0,0,0,1,0,0,0,0,
               0,0,0,0,0,1,0,0,0,
               0,0,0,0,0,0,1,0,0
               ) )
        ]
        for d in data:
            inp = d[0]
            out = d[1]
            self.assertEqual(State(*inp).inputs(), out)
            # ( ([21,22,23],[],[],[0,0,0,0,0,0],[1,3,1,1,1,1]), 5,
            #   ([21,22,23],[],[],[0,0,0,0,0,1]) ),
            # ( ([21,22,23],[],[],[2,0,0,0,0,2],[0,4,0,0,0,0]), 1,
            #   ([21,22,23],[],[],[2,4,0,0,0,2]) ),
            # # miss because of score
            # ( ([21,22,25],[],[24],[1,1,1,1,1,1],[0,0,0,1,0,1]), -1,
            #   ([21,22,24],[],[]  ,[0,0,0,0,0,0]) ),
            # ( ([21,22,23],[],[24],[1,1,1,1,1,1],[0,0,0,1,0,1]), -1,
            #   ([21,22,23],[],[]  ,[0,0,0,0,0,0]) ),
            # # miss because of pikos
            # ( ([21,22,25],[],[24],[0,0,1,0,1,4], [0,0,1,0,1,0]), -1,
            #   ([21,22,24],[],[]  ,[0,0,0,0,0,0]) ),
            # # choose and stop
            # ( ([21,22,25],[],[24]   ,[0,0,0,0,0,0], [8,0,0,0,0,0]), 6,
            #   ([21,22]   ,[],[24,25],[0,0,0,0,0,0]) ),
            # ( ([21,22,25],[],[24]   ,[2,0,0,0,0,2], [0,1,1,1,1,0]), 7,
            #   ([22,25]   ,[],[24,21],[0,0,0,0,0,0]) ),
            # # steal opponent
            # ( ([22,25]   ,[21],[24]   ,[2,0,0,0,0,2], [0,1,1,1,1,0]), 7,
            #   ([22,25]   ,[]  ,[24,21],[0,0,0,0,0,0]) ),
            # ( ([22,25]   ,[23],[24]   ,[2,0,0,0,0,2], [0,1,1,1,1,0]), 9,
            #   ([22,25]   ,[]  ,[24,23],[0,0,0,0,0,0]) ),
            # # nonreg
            # ( ([35, 36], [], [], [0, 1, 0, 1, 2, 2], [0, 2, 0, 0, 0, 0]), -1,
            #   ([35]    , [], [], [0, 0, 0, 0, 0, 0]) )
